{
    "Methods are server functions that can be called from the client. They are useful in situations where you want to do something more complicated than <code>insert</code>, <code>update</code> or <code>remove</code>, or when you need to do data validation that is difficult to achieve with just <code>allow</code> and <code>deny</code>." : "Methods(メソッド)はクライアントから呼ばれるサーバー関数です. これらは、<code>insert</code>、<code>update</code>や<code>remove</code>よりもっと複雑に何かをしたい状況や、<code>allow</code>と<code>deny</code>だけでは難しいデータバリデーションが必要な状況で便利なものです。",
    "Methods can return values and throw errors." : "Methods(メソッド)は戻り値とエラーを返します。",
    "Defines functions that can be invoked over the network by clients." : "クライアントによってネットワーク越しに呼び出される関数を定義します。",
    "Dictionary whose keys are method names and values are functions." : "辞書のキーはメソッド名で、バリューは関数です。",
    "Calling <code>Meteor.methods</code> on the server defines functions that can be called remotely by clients. Here&apos;s an example of a method that checks its arguments and throws an error:" : "サーバー上での<code>Meteor.methods</code>の呼び出しは、クライアント側からリモートで呼び出すことのできる関数を定義します。ここでは、引数のチェックとエラーを返すメソッドの一例を示しています。",
    "The <a href=\"#check\"><code>check</code></a> function is a convenient way to enforce the expected <a href=\"#matchpatterns\">types and structure</a> of method arguments." : "ここでの<a href=\"#check\"><code>check</code></a>関数は、期待されるメソッド引数の<a href=\"#matchpatterns\">typesとstructure</a>を強制実行するための一つの便利な方法です。",
    "Inside your method definition, <code>this</code> is bound to a method invocation object, which has several useful properties, including <code>this.userId</code>, which identifies the currently logged-in user." : "メソッド定義上で、<code>this</code>はメソッド呼び出しにバインドされたオブジェクトです。<code>this</code>はいくつかの便利なプロパティを持ち、その内の<code>this.userId</code>は現状ログインしているユーザーを確認します。",
    "You don&apos;t have to put all your method definitions into a single <code>Meteor.methods</code> call; you may call it multiple times, as long as each method has a unique name." : "ひとつの<code>Meteor.methods</code>呼び出しにメソッド定義全てを置く必要はありません。ユニークな名前を各メソッドが持つ限り、あなたはこれを複数回呼び出すでしょう。",
    "Calling a method on the server requires a round-trip over the network. It would be really frustrating if users had to wait a whole second to see their comment show up due to this delay. That&apos;s why Meteor has a feature called <em>method stubs</em>. If you define a method on the client with the same name as a server method, Meteor will run it to attempt to predict the outcome of the server method. When the code on the server actually finishes, the prediction generated on the client will be replaced with the actual outcome of the server method." : "サーバー上でのメソッド呼び出しは、ネットワーク越しに往復が必要になります。例えば、このネットワークの往復によるディレイによって、ユーザーがコメントを表示させるのに数秒間待たなくてはならないのは非常にストレスになります。なぜならMeteorは<em>method stubs</em>という特徴を持っているからです。もし、あなたがクライアント上で一つのメソッドを一つのサーバーメソッドとして同じ名前で定義した場合、Meteorはサーバーメソッドからの結果を予測して試みる為に実行します。実際にサーバー上でコードが終了すると、クライアント上で生成されたその予測はサーバーメソッドの実際の結果に置き換えられます。",
    "The client versions of <a href=\"#insert\"><code>insert</code></a>, <a href=\"#update\"><code>update</code></a>, and <a href=\"#remove\"><code>remove</code></a>, which are implemented as methods, use this feature to make client-side interactions with the database appear instant." : "メソッドとして実装されたクライアント版の<a href=\"#insert\"><code>insert</code></a>や<a href=\"#update\"><code>update</code></a>や<a href=\"#remove\"><code>remove</code></a>は、クライアント側のインタラクションとデータベースに即時反映させるためにこの特徴を使います。",
    "Invokes a method passing any number of arguments." : "複数の引数を通して呼び出されます。",
    "Name of method to invoke" : "呼び出すためのメソッド名",
    "Optional method arguments" : "任意のメソッド引数",
    "Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below)." : "任意のコールバック（このメソッド完了後に結果やエラーと非同期的に呼ばれる）。もし引数が設定されてない場合、このメソッドは可能であれば同期的に実行される。（以下参照）",
    "This is how you call a method." : "以下は、メソッドの呼び出し方です。",
    "Methods called on the client run asynchronously, so you need to pass a callback in order to observe the result of the call. The callback will be called with two arguments, <code>error</code> and <code>result</code>. The <code>error</code> argument will be <code>null</code> unless an exception was thrown. When an exception is thrown, the <code>error</code> argument is a <code>Meteor.Error</code> instance and the <code>result</code> argument is undefined." : "メソッドはクライアント上で非同期的に実行されるので、呼び出し結果を監視するためにコールバックを渡す必要があります。そのコールバックは<code>error</code>と<code>result</code>の２つを引数として持ち、呼びだされます。<code>error</code>引数は、例外が投げられない限り<code>null</code>を返します。例外が投げられた場合、<code>error</code>引数は<code>Meteor.Error</code>インスタンスとなり、<code>result</code>はundefinedとなります。",
    "Here&apos;s an example of calling the <code>commentOnPost</code> method with arguments <code>comment</code> and <code>postId</code>:" : "ここでの例では、<code>commentOnPost</code>メソッドを<code>comment</code>と<code>postId</code>の引数と共に呼び出しています。",
    "Meteor tracks the database updates performed as part of a method call, and waits to invoke the client-side callback until all of those updates have been sent to the client." : "Meteorはメソッド呼び出しの一部として機能したデータベースアップデートを追跡し、クライアントサイドのコールバックを呼び出すためにクライアントへそれら全てのアップデートが送られるまで待ちます。",
    "On the server, you don&apos;t have to pass a callback &#x2014; the method call will simply block until the method is complete, returning a result or throwing an exception, just as if you called the function directly:" : "サーバー上では、コールバックを渡す必要はありません（ただ単に直接的に関数を呼び出すと、メソッドが結果や例外を返し完了するまでメソッド呼び出しは単純にブロックします）",
    "This class represents a symbolic error thrown by a method." : "このクラスは、何かのメソッドによって投げられたシンボリックエラーを表します。",
    "A string code uniquely identifying this kind of error. This string should be used by callers of the method to determine the appropriate action to take, instead of attempting to parse the reason or details fields. For example:" : "文字列はエラーを特定するユニークなものとして表現します。この文字列は、reasonやdetailsをパースしようとする代わりに適切なアクションを決定するためのメソッドの呼び出し元によって使われるべきです。例えば:",
    "For legacy reasons, some built-in Meteor functions such as <code>check</code> throw errors with a number in this field." : "レガシーな理由のため、いくつかのビルトインなMeteorはエラー処理の順番確認のように機能します。",
    "Optional.  A short human-readable summary of the error, like &apos;Not Found&apos;." : "任意。人間が読んで理解できるエラーの要約。",
    "Optional.  Additional information about the error, like a textual stack trace." : "任意。エラーの追加情報。",
    "If you want to return an error from a method, throw an exception.  Methods can throw any kind of exception, but <code>Meteor.Error</code> is the only kind of error that will be sent to the client. If a method function throws a different exception, the client gets <code>Meteor.Error(500, &apos;Internal server error&apos;)</code>." : "もし、メソッドから何かエラーを返してほしいならば、例外を投げてください。メソッドはいくつかの例外の種類を投げることができますが、<code>Meteor.Error</code>は唯一のクライアントへ送信されるエラーの種類です。もし何かのメソッド関数が異なる例外を投げる場合、クライアントは<code>Meteor.Error(500, &apos;Internal server error&apos;)</code>を受け取ります。"
}
