{
  "Meteor stores data in <em>collections</em>. JavaScript objects stored in collections are called <code>documents</code>. To get started, declare a collection with <code>new Mongo.Collection</code>.":"Meteorは<em>コレクション</em>の中にデータを保存します。コレクションの中に保存されたJavaScriptオブジェクトは<code>documents</code>(ドキュメント)と呼ばれます。開始するには、<code>new Mongo.Collection</code> でコレクションを宣言します。",
  "Constructor for a Collection":"コレクションのコンストラクタ",
  "The name of the collection. If null, creates an unmanaged (unsynchronized) local collection.":"コレクション名。もしnullを指定した場合、管理されない(同期されない)ローカルコレクションを作ります。",
  "Calling the <code>Mongo.Collection</code> constructor creates a collection object which acts just like a MongoDB collection. If you pass a name when you create the collection, then you are declaring a persistent collection &#x2014; one that is stored on the server and can be published to clients.":"<code>Mongo.Collection</code>コンストラクタを呼び出すと、ちょうどMongoDBコレクションのように動作するコレクション・オブジェクトを作成します。コレクションを作成する時に名前を渡すと、永続的なコレクションの宣言になります。それはサーバーに保存され、クライアントに配信することができます。",
  "To allow both client code and server code to access the same collection using the same API, it&apos;s usually best to declare collections as global variables in a JavaScript file that&apos;s present on both client and server.":"クライアントコードとサーバーコードの両方が同じAPIを使用して同じコレクションにアクセスできるようにするには、クライアントとサーバーの両方で使用されるJavaScriptファイル内で、グローバル変数としてコレクションを宣言します。",
  "Here&apos;s an example of declaring two named, persistent collections as global variables:":"ここで、グローバル変数として永続的なコレクションを2つ宣言する例を示します:",
  "If you pass <code>null</code> as the name, then you&apos;re creating a local collection. Local collections are not synchronized between the client and the server; they are just temporary collections of JavaScript objects that support Mongo-style <code>find</code>, <code>insert</code>, <code>update</code>, and <code>remove</code> operations.":"もしnullを名前に渡すと、ローカルコレクションを作成します。ローカルコレクションはクライアントとサーバー間で同期されません。これらはMongoスタイルの<code>find</code>、<code>insert</code>、<code>update</code>、<code>remove</code>をサポートしたJavaScriptオブジェクトの一時的なコレクションとなります。",
  "By default, Meteor automatically publishes every document in your collection to each connected client. To disable this behavior, you must remove the <code>autopublish</code> package, in your terminal:":"デフォルトでは、Meteorは自動的にあなたのコレクションのすべてのドキュメントを接続しているクライアントに配信します。この振る舞いを止めるには、ターミナルで以下のコマンドを実行して、<code>autopublish</code>パッケージを取り除く必要があります:",
  "Then, use <a href=\"#meteor_publish\"><code>Meteor.publish</code></a> and <a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a> to specify which parts of your collection should be published to which clients.":"それから、コレクションの一部をどのクライアントに配信するかを指定するため、<a href=\"#meteor_publish\"><code>Meteor.publish</code></a>と<a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a>を使用します。",
  "Use <code>findOne</code> or <code>find</code> to retrieve documents from a collection.":"コレクションからドキュメントを取得するには、<code>findOne</code>や<code>find</code>を使用します。",
  "Finds the first document that matches the selector, as ordered by sort and skip options.":"selectorにマッチする初めのドキュメントを検索します。sortやskipオプションで順序を指定できます。",
  "A query describing the documents to find":"ドキュメントを検索するためのクエリ",
  "Sort order (default: natural order)":"ソート順 (デフォルト: 自然な順序)",
  "Number of results to skip at the beginning":"結果の先頭からスキップする数",
  "Dictionary of fields to return or exclude.":"取得する or 除外するフィールド",
  "This method lets you retrieve a specific document from your collection. The <code>findOne</code> method is most commonly called with a specific document <code>_id</code>:":"このメソッドは特定のドキュメントをコレクションから取得します。<code>findOne</code>メソッドは特定のドキュメント<code>_id</code>と共に呼び出されるのが最も一般的です:",
  "However, you can also call <code>findOne</code> with a Mongo selector, which is an object that specifies a required set of attributes of the desired document. For example, this selector":"しかしながら、ドキュメントの属性のセットを細かく指定したMongoセレクタで<code>findOne</code>を呼び出すこともできます。たとえば、このセレクタは:",
  "will match this document":"このドキュメントにマッチします",
  "You can read about MongoDB query operators such as <code>$regex</code>, <code>$lt</code> (less than), <code>$text</code> (text search), and more in the <a href=\"http://docs.mongodb.org/manual/reference/operator/query/\">MongoDB documentation</a>.":"<code>$regex</code> (正規表現)、<code>$lt</code> (より小さい)、<code>$text</code> (テキスト検索)など多くのMongoDBクエリ操作について、詳しくは<a href=\"http://docs.mongodb.org/manual/reference/operator/query/\">MongoDBドキュメント</a>をご覧ください。",
  "One useful behavior that might not be obvious is that Mongo selectors also match items in arrays. For example, this selector":"明確ではないかもしれませんが、ひとつの便利な動作として、Mongoセレクタは配列内の要素にもマッチします。たとえば、このセレクタは",
  "The <code>findOne</code> method is reactive just like <a href=\"#session_get\"><code>Session.get</code></a>, meaning that, if you use it inside a <a href=\"#template_helpers\">template helper</a> or a <a href=\"#tracker_autorun\"><code>Tracker.autorun</code></a> callback, it will automatically rerender the view or rerun the computation if the returned document changes.":"<code>findOne</code>メソッドは<a href=\"#session_get\"><code>Session.get</code></a>のようにリアクティブです。すなわち、<a href=\"#template_helpers\">テンプレートヘルパー</a>の中や<a href=\"#tracker_autorun\"><code>Tracker.autorun</code></a>のコールバックで使用すると、ドキュメントが更新された時に自動的に表示が再描画されたり、計算処理が再実行されます。",
  "Note that <code>findOne</code> will return <code>null</code> if it fails to find a matching document, which often happens if the document hasn&apos;t been loaded yet or has been removed from the collection, so you should be prepared to handle <code>null</code> values.":"注:<code>findOne</code>はマッチするドキュメントが見つからなかった時に<code>null</code>を返します。それはドキュメントがまだ読み込まれていなかったり、コレクションからドキュメントを取り除いた時に頻繁に起こります。そのため<code>null</code>値の場合の処理を用意する必要があります。",
  "Find the documents in a collection that match the selector.":"コレクションの中からselectorにマッチしたドキュメントを検索します。",
  "Maximum number of results to return":"結果の最大数",
  "The <code>find</code> method is similar to <code>findOne</code>, but instead of returning a single document it returns a MongoDB <em>cursor</em>. A cursor is a special object that represents a list of documents that might be returned from a query. You can pass a cursor into a template helper anywhere you could pass an array:":"<code>find</code>メソッドは<code>findOne</code>と似ていますが、一つのドキュメントの代わりに、MongoDB<em>カーソル</em>を返します。カーソルは、クエリから返される可能性があるドキュメントのリストを表す特別なオブジェクトです。テンプレートヘルパーの中で配列を渡すことができる場所ならどこでもカーソルを渡すことができます:",
  "When you want to retrieve the current list of documents from a cursor, call the cursor&apos;s <code>.fetch()</code> method:":"カーソルからドキュメントのリストを取り出すには、カーソルの<code>.fetch()</code>メソッドを呼び出します:",
  "Keep in mind that while the computation in which you call <code>fetch</code> will rerun when the data changes, the resulting array will not be reactive if it is passed somewhere else.":"注意すべきは、データが更新されたときに<code>fetch</code>自体の計算は再実行されますが、その結果の配列はリアクティブではないため別のところに渡した場合は更新されなくなる点です。",
  "You can modify the data stored in a <code>Mongo.Collection</code> by calling <code>insert</code>, <code>update</code>, or <code>remove</code>.":"<code>Mongo.Collection</code>の中に保存されたデータは<code>insert</code>や<code>update</code>、<code>remove</code>を呼ぶことで変更できます。"
}