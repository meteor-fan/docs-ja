{
  "Meteor stores data in <em>collections</em>. JavaScript objects stored in collections are called <code>documents</code>. To get started, declare a collection with <code>new Mongo.Collection</code>.":"Meteorは<em>コレクション</em>の中にデータを保存します。コレクションの中に保存されたJavaScriptオブジェクトは<code>documents</code>(ドキュメント)と呼ばれます。開始するには、<code>new Mongo.Collection</code> でコレクションを宣言します。",
  "Constructor for a Collection":"コレクションのコンストラクタ",
  "The name of the collection. If null, creates an unmanaged (unsynchronized) local collection.":"コレクション名。もしnullを指定した場合、管理されない(同期されない)ローカルコレクションを作ります。",
  "Calling the <code>Mongo.Collection</code> constructor creates a collection object which acts just like a MongoDB collection. If you pass a name when you create the collection, then you are declaring a persistent collection &#x2014; one that is stored on the server and can be published to clients.":"<code>Mongo.Collection</code>コンストラクタを呼び出すと、ちょうどMongoDBコレクションのように動作するコレクション・オブジェクトを作成します。コレクションを作成する時に名前を渡すと、永続的なコレクションの宣言になります。それはサーバーに保存され、クライアントに配信することができます。",
  "To allow both client code and server code to access the same collection using the same API, it&apos;s usually best to declare collections as global variables in a JavaScript file that&apos;s present on both client and server.":"クライアントコードとサーバーコードの両方が同じAPIを使用して同じコレクションにアクセスできるようにするには、クライアントとサーバーの両方で使用されるJavaScriptファイル内で、グローバル変数としてコレクションを宣言します。",
  "Here&apos;s an example of declaring two named, persistent collections as global variables:":"ここで、グローバル変数として永続的なコレクションを2つ宣言する例を示します:",
  "If you pass <code>null</code> as the name, then you&apos;re creating a local collection. Local collections are not synchronized between the client and the server; they are just temporary collections of JavaScript objects that support Mongo-style <code>find</code>, <code>insert</code>, <code>update</code>, and <code>remove</code> operations.":"もしnullを名前に渡すと、ローカルコレクションを作成します。ローカルコレクションはクライアントとサーバー間で同期されません。これらはMongoスタイルの<code>find</code>、<code>insert</code>、<code>update</code>、<code>remove</code>をサポートしたJavaScriptオブジェクトの一時的なコレクションとなります。",
  "By default, Meteor automatically publishes every document in your collection to each connected client. To disable this behavior, you must remove the <code>autopublish</code> package, in your terminal:":"デフォルトでは、Meteorは自動的にあなたのコレクションのすべてのドキュメントを接続しているクライアントに配信します。この振る舞いを止めるには、ターミナルで以下のコマンドを実行して、<code>autopublish</code>パッケージを取り除く必要があります:",
  "Then, use <a href=\"#meteor_publish\"><code>Meteor.publish</code></a> and <a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a> to specify which parts of your collection should be published to which clients.":"それから、コレクションの一部をどのクライアントに配信するかを指定するため、<a href=\"#meteor_publish\"><code>Meteor.publish</code></a>と<a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a>を使用します。",
  "Use <code>findOne</code> or <code>find</code> to retrieve documents from a collection.":"コレクションからドキュメントを取得するには、<code>findOne</code>や<code>find</code>を使用します。",
  "Finds the first document that matches the selector, as ordered by sort and skip options.":"selectorにマッチする初めのドキュメントを検索します。sortやskipオプションで順序を指定できます。",
  "A query describing the documents to find":"ドキュメントを検索するためのクエリ",
  "Sort order (default: natural order)":"ソート順 (デフォルト: 自然な順序)",
  "Number of results to skip at the beginning":"結果の先頭からスキップする数",
  "Dictionary of fields to return or exclude.":"取得する or 除外するフィールド",
  "This method lets you retrieve a specific document from your collection. The <code>findOne</code> method is most commonly called with a specific document <code>_id</code>:":"このメソッドは特定のドキュメントをコレクションから取得します。<code>findOne</code>メソッドは特定のドキュメント<code>_id</code>と共に呼び出されるのが最も一般的です:",
  "However, you can also call <code>findOne</code> with a Mongo selector, which is an object that specifies a required set of attributes of the desired document. For example, this selector":"しかしながら、ドキュメントの属性のセットを細かく指定したMongoセレクタで<code>findOne</code>を呼び出すこともできます。たとえば、このセレクタは:",
  "will match this document":"このドキュメントにマッチします",
  "You can read about MongoDB query operators such as <code>$regex</code>, <code>$lt</code> (less than), <code>$text</code> (text search), and more in the <a href=\"http://docs.mongodb.org/manual/reference/operator/query/\">MongoDB documentation</a>.":"<code>$regex</code> (正規表現)、<code>$lt</code> (より小さい)、<code>$text</code> (テキスト検索)など多くのMongoDBクエリ操作について、詳しくは<a href=\"http://docs.mongodb.org/manual/reference/operator/query/\">MongoDBドキュメント</a>をご覧ください。",
  "One useful behavior that might not be obvious is that Mongo selectors also match items in arrays. For example, this selector":"明確ではないかもしれませんが、ひとつの便利な動作として、Mongoセレクタは配列内の要素にもマッチします。たとえば、このセレクタは",
  "The <code>findOne</code> method is reactive just like <a href=\"#session_get\"><code>Session.get</code></a>, meaning that, if you use it inside a <a href=\"#template_helpers\">template helper</a> or a <a href=\"#tracker_autorun\"><code>Tracker.autorun</code></a> callback, it will automatically rerender the view or rerun the computation if the returned document changes.":"<code>findOne</code>メソッドは<a href=\"#session_get\"><code>Session.get</code></a>のようにリアクティブです。すなわち、<a href=\"#template_helpers\">テンプレートヘルパー</a>の中や<a href=\"#tracker_autorun\"><code>Tracker.autorun</code></a>のコールバックで使用すると、ドキュメントが更新された時に自動的に表示が再描画されたり、計算処理が再実行されます。",
  "Note that <code>findOne</code> will return <code>null</code> if it fails to find a matching document, which often happens if the document hasn&apos;t been loaded yet or has been removed from the collection, so you should be prepared to handle <code>null</code> values.":"注:<code>findOne</code>はマッチするドキュメントが見つからなかった時に<code>null</code>を返します。それはドキュメントがまだ読み込まれていなかったり、コレクションからドキュメントを取り除いた時に頻繁に起こります。そのため<code>null</code>値の場合の処理を用意する必要があります。",
  "Find the documents in a collection that match the selector.":"コレクションの中からselectorにマッチしたドキュメントを検索します。",
  "Maximum number of results to return":"結果の最大数",
  "The <code>find</code> method is similar to <code>findOne</code>, but instead of returning a single document it returns a MongoDB <em>cursor</em>. A cursor is a special object that represents a list of documents that might be returned from a query. You can pass a cursor into a template helper anywhere you could pass an array:":"<code>find</code>メソッドは<code>findOne</code>と似ていますが、一つのドキュメントの代わりに、MongoDB<em>カーソル</em>を返します。カーソルは、クエリから返される可能性があるドキュメントのリストを表す特別なオブジェクトです。テンプレートヘルパーの中で配列を渡すことができる場所ならどこでもカーソルを渡すことができます:",
  "When you want to retrieve the current list of documents from a cursor, call the cursor&apos;s <code>.fetch()</code> method:":"カーソルからドキュメントのリストを取り出すには、カーソルの<code>.fetch()</code>メソッドを呼び出します:",
  "Keep in mind that while the computation in which you call <code>fetch</code> will rerun when the data changes, the resulting array will not be reactive if it is passed somewhere else.":"注意すべきは、データが更新されたときに<code>fetch</code>自体の計算は再実行されますが、その結果の配列はリアクティブではないため別のところに渡した場合は更新されなくなる点です。",
  "You can modify the data stored in a <code>Mongo.Collection</code> by calling <code>insert</code>, <code>update</code>, or <code>remove</code>.":"<code>Mongo.Collection</code>の中に保存されたデータは<code>insert</code>や<code>update</code>、<code>remove</code>を呼ぶことで変更できます。",
  "Insert a document in the collection. Returns its unique _id.":"コレクションにドキュメントを挿入します。そして一意の_idを返します。",
  "The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.":"挿入するドキュメント。_id属性が持っていない場合、Meteorは_idを生成します。",
  "Optional. If present, called with an error object as the first argument and, if no error, the _id as the second.":"オプション。存在した場合、コールバック関数の第１引数にエラーオブジェクトを渡します。もしエラーがなければ、_idを第２引数に渡します。",
  "Here&apos;s how you insert a document into a collection:":"コレクションにドキュメントを挿入する方法は次の通りです:",
  "Every document in every <code>Mongo.Collection</code> has an <code>_id</code> field. It must be unique, and is automatically generated if you don&apos;t provide one. The <code>_id</code> field can be used to retrieve a specific document using <a href=\"#findOne\"><code>collection.findOne</code></a>.":"すべての<code>Mongo.Collection</code>のすべてのドキュメントは、_idフィールドを持っています。それは一意であり、<code>_id</code>を指定しなかった時は自動的に生成されます。<code>_id</code>フィールドは<a href=\"#findOne\"><code>collection.findOne</code></a>で特定のドキュメントを取得するために使用できます。",
  "Modify one or more documents in the collection. Returns the number of affected documents.":"コレクション内の1つまたは複数のドキュメントを修正します。影響を与えたドキュメントの数を返します。",
  "Specifies which documents to modify":"修正したいドキュメントの指定します",
  "Specifies how to modify the documents":"ドキュメントをどのように修正するかを指定します",
  "Optional. If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.":"オプション。存在する場合、コールバック関数の第１引数にエラーオブジェクトが渡されます。もしエラーがなければ、影響を与えたドキュメントの数を第２引数に渡します。",
  "True to modify all matching documents; false to only modify one of the matching documents (the default).":"trueならselectorマッチするドキュメントをすべて修正します。falseならマッチするドキュメントの一つを修正します(デフォルト)。",
  "True to insert a document if no matching documents are found.":"trueならマッチするドキュメントが見つからなかった場合にドキュメントを新たに挿入します。",
  "The selector here is just like the one you would pass to <code>find</code>, and can match multiple documents. The modifier is an object that specifies which changes should be made to the matched documents. Watch out - unless you use an operator like <code>$set</code>, <code>update</code> will simply replace the entire matched document with the modifier.":"selectorは<code>find</code>メソッドに渡すのと同じようなもので、複数のドキュメントにマッチします。modifierはマッチしたドキュメントをどのように修正するかを記述したオブジェクトです。注:modifierで<code>$set</code>オペレーターを指定しない場合、<code>update</code>はマッチしたドキュメントをmodifierとまるごと交換します。",
  "Here&apos;s an example of setting the <code>content</code> field on all posts whose titles contain the word &quot;first&quot;:":"ここで、タイトルに&quot;first&quot;を含むすべてのpostsに、contentフィールドをセットする例を示します:",
  "You can read about all of the different operators that are supported in the <a href=\"http://docs.mongodb.org/manual/reference/operator/update/\">MongoDB documentation</a>.":"updateの各オペレーターについては<a href=\"http://docs.mongodb.org/manual/reference/operator/update/\">MongoDB documentation</a>で知ることができます。",
  "There&apos;s one catch: when you call <code>update</code> on the client, you can only find documents by their <code>_id</code> field. To use all of the possible selectors, you must call <code>update</code> in server code or from a <a href=\"#meteor_methods\">method</a>.":"注:クライアント上でupdateを呼び出した場合、_idフィールドでのみドキュメントを見つけることができます。セレクタに他のものを使用する場合は、サーバーコードか<a href=\"#meteor_methods\">method</a>経由でupdateを呼び出す必要があります。",
  "Remove documents from the collection":"コレクションからドキュメントを削除します",
  "Specifies which documents to remove":"削除するドキュメントを指定します",
  "Optional. If present, called with an error object as its argument.":"オプション。もし存在する場合、引数にエラーオブジェクトが渡されたコールバック関数が呼ばれます。",
  "This method uses the same selectors as <code>find</code> and <code>update</code>, and removes any documents that match the selector from the database. Use <code>remove</code> carefully &#x2014; there&apos;s no way to get that data back.":"このメソッドは<code>find</code>や<code>update</code>と同じセレクタが使用でき、セレクタにマッチしたドキュメントをデータベースから取り除きます。<code>remove</code>を使用するときは気をつけて下さい &#x2014; 削除されたデータを再び取得する方法はありません。",
  "As with <code>update</code>, client code can only remove documents by <code>_id</code>, whereas server code and <a href=\"#meteor_methods\">methods</a> can remove documents using any selector.":"<code>update</code>と同様に、クライアントコードでは<code>_id</code>でのみドキュメントを削除できます。一方で、サーバーコードや<a href=\"#meteor_methods\">methods</a>であれば他のセレクタを使用してドキュメントを削除することができます。",
  "Allow users to write directly to this collection from client code, subject to limitations you define.":"クライアントコードからこのコレクションに直接書き込みできるユーザの制限を定義します。",
  "Functions that look at a proposed modification to the database and return true if it should be allowed.":"データベースへの変更の提案を見て、許可すべきなら、trueを返す関数です。",
  "In newly created apps, Meteor allows almost any calls to <code>insert</code>, <code>update</code>, and <code>remove</code> from any client or server code. This is because apps started with <code>meteor create</code> include the <code>insecure</code> package by default to simplify development. Obviously, if any user could change the database whenever they wanted it would be bad for security, so it is important to remove the <code>insecure</code> package and specify some permissions rules, in your terminal:":"新しく作成されたアプリでは、Meteorはクライアントまたはサーバーコードからのほとんどの<code>insert</code>、<code>update</code>、<code>remove</code>の呼び出しを許可します。これは<code>meteor create</code>で始めたアプリには、デフォルトでシンプルに開発を行うための<code>insecure</code>パッケージが含まれているためです。当然ながら、誰もがどんな時にもデータベースを変更できるというのはセキュリティ的に良くありません。そこで、<code>insecure</code>パッケージを取り除き、いくつかのアクセス許可ルールを指定することが重要です。ターミナルで:",
  "Once you have removed the <code>insecure</code> package, use the <code>allow</code> and <code>deny</code> methods to control who can perform which operations on the database. By default, all operations on the client are denied, so we need to add some <code>allow</code> rules.  Keep in mind that server code and code inside <a href=\"#meteor_methods\">methods</a> are not affected by <code>allow</code> and <code>deny</code> &#x2014; these rules only apply when <code>insert</code>, <code>update</code>, and <code>remove</code> are called from untrusted client code.":"一度<code>insecure</code>を取り除いたら、データベース操作を行えるユーザーをコントロールするために<code>allow</code>と<code>deny</code>メソッドを使用します。デフォルトでは、クライアント上でのすべての操作は拒否されるため、いくつかの許可ルールの追加が必要です。注意すべきは、サーバーコードと<a href=\"#meteor_methods\">methods</a>のコード内では、<code>allow</code>と<code>deny</code>は影響を与えない点です &#x2014; これらのルールは、信頼されないクライアントコードからの<code>insert</code>、<code>update</code>、<code>remove</code>にのみ適用されます。",
  "For example, we might say that users can only create new posts if the <code>createdBy</code> field matches the ID of the current user, so that users can&apos;t impersonate each other.":"たとえば、現在のユーザーのIDと<code>createdBy</code>フィールドがマッチする場合のみ新しい記事を作成できるようにすると、他のユーザーがなりすましできなくなるでしょう。",
  "The <code>allow</code> method accepts three possible callbacks: <code>insert</code>, <code>remove</code>, and <code>update</code>. The first argument to all three callbacks is the <code>_id</code> of the logged in user, and the remaining arguments are as follows:":"<code>allow</code>メソッドは次の3つのコールバックを受け付けます: <code>insert</code>と<code>remove</code>と<code>update</code>。すべてのコールバックの第１引数には現在ログインしているユーザの<code>_id</code>が渡されます。残りの引数は次の通りです:",
  "<code>document</code> is the document that is about to be inserted into the database. Return <code>true</code> if the insert should be allowed, <code>false</code> otherwise.":"<code>document</code>はデータベースに挿入されようとしているドキュメントです。もし挿入を許可すべきなら<code>true</code>を返し、そうでなければ<code>false</code>を返します。",
  "<code>document</code> is the document that is about to be modified. <code>fieldNames</code> is an array of top-level fields that are affected by this change. <code>modifier</code> is the <a href=\"#mongo_modifiers\">Mongo Modifier</a> that was passed as the second argument of <code>collection.update</code>. It can be difficult to achieve correct validation using this callback, so it is recommended to use <a href=\"#meteor_methods\">methods</a> instead. Return <code>true</code> if the update should be allowed, <code>false</code> otherwise.":"<code>document</code>は変更されようとしているドキュメントです。<code>fieldNames</code>はこの変更によって影響を受ける最上位フィールドの配列です。<code>modifier</code>は<code>collection.update</code>の第２引数に渡された<a href=\"#mongo_modifiers\">Mongo Modifier</a>です。このコールバックを使用して正しい検証を行うのは難しいため、その場合は<a href=\"#meteor_methods\">methods</a>を代わりに使用することをおすすめします。更新を許可すべきなら<code>true</code>を返し、そうでなければ<code>false</code>を返します。",
  "<code>document</code> is the document that is about to be removed from the database. Return <code>true</code> if the document should be removed, <code>false</code> otherwise.":"<code>document</code>はデータベースから削除されようとしているドキュメントです。削除を許可すべきなら<code>true</code>を返し、そうでなければ<code>false</code>を返します。",
  "Override <code>allow</code> rules.":"<code>allow</code>ルールを上書きします。",
  "Functions that look at a proposed modification to the database and return true if it should be denied, even if an <a href=\"#allow\">allow</a> rule says otherwise.":"データベースへの変更の提案を見て、拒否すべきなら、trueを返す関数です。<a href=\"#allow\">allow</a>ルールで許可していても、denyルールで上書きされます",
  "The <code>deny</code> method lets you selectively override your <code>allow</code> rules. While only one of your <code>allow</code> callbacks has to return true to allow a modification, <em>every one</em> of your <code>deny</code> callbacks has to return false for the database change to happen.":"<code>deny</code>メソッドを使用して、<code>allow</code>ルールを選択的に上書きできます。<code>allow</code>コールバックのいずれかがtrueを返し、<em>全ての</em><code>deny</code>コールバックがfalseを返すことでデータベースの変更が許可されます。",
  "For example, if we wanted to override part of our <code>allow</code> rule above to exclude certain post titles:":"たとえば、前にでてきた<code>allow</code>ルールを上書きして、特定のタイトルの記事を除外したい場合は、以下のように記述します:"
}