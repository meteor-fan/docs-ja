{
  "Meteor stores data in <em>collections</em>. JavaScript objects stored in collections are called <code>documents</code>. To get started, declare a collection with <code>new Mongo.Collection</code>.":"Meteorは<em>コレクション</em>の中にデータを保存します。コレクションの中に保存されたJavaScriptオブジェクトは<code>documents</code>(ドキュメント)と呼ばれます。開始するには、<code>new Mongo.Collection</code> でコレクションを宣言します。",
  "Constructor for a Collection":"コレクションのコンストラクタ",
  "The name of the collection. If null, creates an unmanaged (unsynchronized) local collection.":"コレクション名。もしnullを指定した場合、管理されない(同期されない)ローカルコレクションを作ります。",
  "Calling the <code>Mongo.Collection</code> constructor creates a collection object which acts just like a MongoDB collection. If you pass a name when you create the collection, then you are declaring a persistent collection &#x2014; one that is stored on the server and can be published to clients.":"<code>Mongo.Collection</code>コンストラクタを呼び出すと、ちょうどMongoDBコレクションのように動作するコレクション・オブジェクトを作成します。コレクションを作成する時に名前を渡すと、永続的なコレクションの宣言になります。それはサーバーに保存され、クライアントに配信することができます。",
  "To allow both client code and server code to access the same collection using the same API, it&apos;s usually best to declare collections as global variables in a JavaScript file that&apos;s present on both client and server.":"クライアントコードとサーバーコードの両方が同じAPIを使用して同じコレクションにアクセスできるようにするには、クライアントとサーバーの両方で使用されるJavaScriptファイル内で、グローバル変数としてコレクションを宣言します。",
  "Here&apos;s an example of declaring two named, persistent collections as global variables:":"ここで、グローバル変数として永続的なコレクションを2つ宣言する例を示します:",
  "If you pass <code>null</code> as the name, then you&apos;re creating a local collection. Local collections are not synchronized between the client and the server; they are just temporary collections of JavaScript objects that support Mongo-style <code>find</code>, <code>insert</code>, <code>update</code>, and <code>remove</code> operations.":"もしnullを名前に渡すと、ローカルコレクションを作成します。ローカルコレクションはクライアントとサーバー間で同期されません。これらはMongoスタイルの<code>find</code>、<code>insert</code>、<code>update</code>、<code>remove</code>をサポートしたJavaScriptオブジェクトの一時的なコレクションとなります。",
  "By default, Meteor automatically publishes every document in your collection to each connected client. To disable this behavior, you must remove the <code>autopublish</code> package, in your terminal:":"デフォルトでは、Meteorは自動的にあなたのコレクションのすべてのドキュメントを接続しているクライアントに配信します。この振る舞いを止めるには、ターミナルで以下のコマンドを実行して、<code>autopublish</code>パッケージを取り除く必要があります:",
  "Then, use <a href=\"#meteor_publish\"><code>Meteor.publish</code></a> and <a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a> to specify which parts of your collection should be published to which clients.":"それから、コレクションの一部をどのクライアントに配信するかを指定するため、<a href=\"#meteor_publish\"><code>Meteor.publish</code></a>と<a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a>を使用します。",
  "Use <code>findOne</code> or <code>find</code> to retrieve documents from a collection.":"コレクションからドキュメントを取得するには、<code>findOne</code>や<code>find</code>を使用します。"

}