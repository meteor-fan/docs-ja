{
"A Meteor application is a mix of client-side JavaScript that runs inside a web browser or PhoneGap mobile app, server-side JavaScript that runs on the Meteor server inside a <a href=\"http://nodejs.org/\">Node.js</a> container, and all the supporting HTML templates, CSS rules, and static assets.  Meteor automates the packaging and transmission of these different components, and it is quite flexible about how you choose to structure those components in your file tree.": "Meteorのアプリケーションの構成要素はウェブブラウザやモバイルアプリで動くクライアント・サイドJavaScriptと、Node.jsコンテナ内のMeteorサーバーで動くサーバーサイドJavaScript、そしてHTMLテンプレート、CSS、静的アセットなどからできています。Meteorはこれらの様々なコンポーネントを自動的にパッケージング、送信を行っています。そしてそれらのコンポーネントを含むファイル・ツリー内で、どう構造化するかは非常に自由度が高いものになっています。",
"By default, any JavaScript files in your Meteor folder are bundled and sent to the client and the server. However, the names of the files and directories inside your project can affect their load order, where they are loaded, and some other characteristics. Here is a list of file and directory names that are treated specially by Meteor:":"初期状態では、Meteorフォルダー内にあるJavaScriptファイルはひと固まりであり、クライアントとサーバー双方に送られています。しかしながら、ファイルやディレクトリの名前によって、ファイルのロードのされ方を変えることができます。あるファイルはクライアント側にロードされ、他のはサーバー固有のファイルにできます。Meteorにおいて特別に扱われるファイル名とディレクトリ名は、以下のリストにあるものです。",
"Any directory named <code>client</code> is not loaded on the server. Similar to wrapping your code in <code>if (Meteor.isClient) { ... }</code>. All files loaded on the client are automatically concatenated and minified when in production mode. In development mode, JavaScript and CSS files are not minified, to make debugging easier.  (CSS files are still combined into a single file for consistency between production and development, because changing the CSS file&apos;s URL affects how URLs in it are processed.)":"<code>client</code>ディレクトリはサーバー側には読み込まれません。<code>if(Meteor.isClient){ ... }</code>で囲んだ部分も同様です。クライアントに読み込まれたすべてのファイルは、production モードの時には自動的に結合、縮小化されます。developmentモードではJavaScriptとCSSファイルは、デバッグしやすくするために縮小化は行いません。（CSSファイルの場合は,URL変更がCSS読み込みに影響するので、productionとdevelopmentの双方で単一のファイルに結合されています。)",
"HTML files in a Meteor application are treated quite a bit differently from a server-side framework.  Meteor scans all the HTML files in your directory for three top-level elements: <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code>, and <code>&lt;template&gt;</code>.  The head and body sections are separately concatenated into a single head and body, which are transmitted to the client on initial page load.":"MeteorアプリケーションにおけるHTMLファイルの扱いは、サーバーサイドフレームワークにおけるものと異なっています。Meteorはディレクトリ内のHTMLファイルにおいて、３つのトップレベル要素でスキャンします。:<code>&lt;head&gt;</code>, <code>&lt;body&gt;</code>, <code>&lt;template&gt;</code>の３つです。headとbodyはそれぞれ分けられて、一つのheadと一つのbodyに結合されます。それらはページの最初のローディングの際にクライアントに転送されます。","The key idea in the Meteor package system is that <em>everything should work identically in the browser and on the server</em> (wherever it makes sense, of course: browsers can&apos;t send email and servers can&apos;t capture mouse events). Our whole ecosystem has been built from the ground up to support this.":"Meteorのパッケージシステムの鍵となるアイデアは、パッケージは<em>ブラウザとサーバー上で全く同じように動くべきだ</em>というものですす。( ブラウザはE-mailをサーバーに送ることができ、サーバーはマウスのイベントを捕捉することができるのです。我々のエコシステムはこれを完全に実現するために作られました。)"
}
