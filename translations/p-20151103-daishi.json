{
    "Register a function to be called when an instance of this template is inserted into the DOM.": "テンプレートがDOMに追加されたときに呼び出される関数を登録する。",
    "A function to be added as a callback.": "コールバック関数",
    "The functions added with this method are called once for every instance of <em>Template.myTemplate</em> when it is inserted into the page for the first time.": "このメソッドにより追加された関数は、<em>Template.myTemplate</em>のすべてのインスタンスが初めてページに挿入されるときに、一度だけ呼び出されます。",
    "These callbacks can be used to integrate external libraries that aren&apos;t familiar with Meteor&apos;s automatic view rendering, and need to be initialized every time HTML is inserted into the page. You can perform initialization or clean-up on any objects in <a href=\"#template_oncreated\"><code>onCreated</code></a> and <a href=\"#template_ondestroyed\"><code>onDestroyed</code></a> callbacks.": "これらのコールバック関数は外部ライブラリを使うことに利用できます。外部ライブラリはMeteorの自動ビューレンダリングをそのままでは使えず、HTMLがページに挿入されるたびに初期化する必要があります。初期化や終了の処理は<a href=\"#template_oncreated\"><code>onCreated</code></a>と<a href=\"#template_ondestroyed\"><code>onDestroyed</code></a>のコールバック内で行うことができます。",
    "For example, to use the HighlightJS library to apply code highlighting to all <code>&lt;pre&gt;</code> elements inside the <code>codeSample</code> template, you might pass the following function to <code>Template.codeSample.onRendered</code>:": "例えば、<code>codeSample</code>テンプレート内のすべての<code>&lt;pre&gt;</code>要素をハイライトするためにHighlightJSライブラリを使う場合は、次の関数を<code>Template.codeSample.onRendered</code>に渡すでしょう:",
    "In the callback function, <code>this</code> is bound to a <a href=\"#template_inst\">template instance</a> object that is unique to this inclusion of the template and remains across re-renderings. You can use methods like <a href=\"#template_find\"><code>this.find</code></a> and <a href=\"#template_findAll\"><code>this.findAll</code></a> to access DOM nodes in the template&apos;s rendered HTML.": "コールバック関数の中では、<code>this</code>は<a href=\"#template_inst\">template instance</a>オブジェクトになります。このオブジェクトはこのテンプレートに固有のもので再描画されても変わりません。テンプレートHTMLのDOMにアクセスするために<a href=\"#template_find\"><code>this.find</code></a>や<a href=\"#template_findAll\"><code>this.findAll</code></a>などのメソッドを使うことができます。",
    "A template instance object represents a single inclusion of a template in the document.  It can be used to access the HTML elements inside the template and it can be assigned properties that persist as the template is reactively updated.": "テンプレートインスタンスオブジェクトはドキュメント中の一つのテンプレートの挿入に相当します。このオブジェクトはテンプレート内のHTML要素へのアクセスやプロパティ保持に使われます。プロパティはテンプレートがリアクティブに更新されても変化しません。",
    "Template instance objects can be found in several places:": "テンプレートインスタンスオブジェクトは複数の所で使用されます:",
    "You can assign additional properties of your choice to the template instance to keep track of any state relevant to the template. For example, when using the Google Maps API you could attach the <code>map</code> object to the current template instance to be able to refer to it in helpers and event handlers. Use the <a href=\"#template_onCreated\"><code>onCreated</code></a> and <a href=\"#template_onDestroyed\"><code>onDestroyed</code></a> callbacks to perform initialization or clean-up.": "テンプレートには追加で開発者が任意のプロパティを設定することができます。このプロパティはテンプレートの状態を保持することに使えます。例えば、Google Maps APIを使う場合に、<code>map</code>オブジェクトをテンプレートインスタンスに設定し、ヘルパー関数やイベントハンドラ関数から参照することができます。初期化や終了の処理には、<a href=\"#template_onCreated\"><code>onCreated</code></a>や<a href=\"#template_onDestroyed\"><code>onDestroyed</code></a>のコールバックを使いましょう。",
    "Find all elements matching <code>selector</code> in this template instance.": "テンプレート内で<code>selector</code>にマッチする要素をすべて見つける",
    "The CSS selector to match, scoped to the template contents.": "マッチするCSSセレクタ。テンプレート内に限定される。",
    "<code>template.findAll</code> returns an array of DOM elements matching <code>selector</code>. You can also use <code>template.$</code>, which works exactly like the JQuery <code>$</code> function but only returns elements within <code>template</code>.": "<code>template.findAll</code>は、<code>selector</code>にマッチするDOM要素の配列を返します。また、<code>template.$</code>はJQueryの<code>$</code>と同じように使える関数です。ただし、<code>template</code>内の要素しか返しません。",
    "Find one element matching <code>selector</code> in this template instance.": "テンプレート内で<code>selector</code>にマッチする要素をひとつ見つける",
    "<code>find</code> is just like <code>findAll</code> but only returns the first element found. Like <code>findAll</code>, <code>find</code> only returns elements from inside the template.": "<code>find</code>は<code>findAll</code>とほぼ同じですが、最初に見つかったひとつの要素だけを返します。<code>findAll</code>と同じく、<code>find</code>はテンプレート内の要素だけを返します。"
}
