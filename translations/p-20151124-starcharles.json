{
  "Boolean variable.  True if running in a Cordova mobile environment.": "真偽値。Cordovaモバイル環境の場合Trueになる",
  "On a server, the function will run as soon as the server process is finished starting. On a client, the function will run as soon as the DOM is ready.": "サーバー上では、サーバーの開始が完了すると同時に関数が実行される。クライアント上では、DOMが完了すると同時に関数が実行される。",
  "The <code>startup</code> callbacks are called in the same order as the calls to <code>Meteor.startup</code> were made.": "<code>startup</code>のコールバック関数は<code>Meteor.startup</code>の呼びだされた順番によって実行される。",
  "On a client, <code>startup</code> callbacks from packages will be called first, followed by <code>&lt;body&gt;</code> templates from your <code>.html</code> files,followed by your application code.": "クライアント上では、パッケージ内にある<code>startup</code>コールバック関数が先に呼び出され、次に<code>.html</code>ファイルにある<code>&lt;body&gt;</code>テンプレートにあるコールバック関数が呼ばれ、最後にあなたの書いたアプリケーションのコードにあるコールバック関数が呼ばれます。 ","Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be <code>function(error, result){}</code>. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.":"コールバック関数を引数の最後に受け取る関数をラップします。ラップされた関数に代入されるコールバック関数に特徴的な書き方は<code>function(error, result){}</code>です。サーバー上では、ラップされた関数は同期的（コールバック関数を設定しない）にも非同期的（コールバック関数を設定する）にも使えます。","A function that takes a callback as its final parameter":"引数の最後にコールバック関数を受け取る関数","Optional <code>this</code> object against which the original function will be invoked":"ラップされる前の関数オブジェクトが代入される<code>this</code>"
  
}
